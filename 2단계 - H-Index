나만의 접근방법

1. citations배열을 내림차순으로 정렬을 하여 sortedArray에 저장하였음

2. allZero라는 0으로만 이루어진 soteArray의 길이만큼의 배열을 만듦

이유는 0번인용된 논문들로만 이루어진 배열이면 0을 반환해야하기 때문임

3. 1부터 내림차순으로 정렬된 sortedArray의 마지막 인자까지의 범위를 받는 i가 

sortedArray의 요소보다 작거나 같으면 morethanIcount를 1씩 증가하도록함

 

sortedArray가 [0,1,2,4,5,6,7,10]일때 i는 1부터 10까지 범위를 가지게 되고

i - h값

1 - 7개 (1,2,4,5,6,7,10)

2 - 6개 (2,4,5,6,7,10)

3 - 5개 (4,5,6,7,10)

4 - 5개 (4,5,6,7,10)

5 - 4개 (5,6,7,10)

 

i가 h 값보다 크게 될때 i-1 값을 리턴하도록 하였음

 

 

 내코드 

 

import Foundation

func solution(_ citations:[Int]) -> Int {
    
    var sortedArray = citations.sorted(by: <)
    
    var allZero = Array(repeating: 0, count: sortedArray.count)
    
    if sortedArray == allZero{
        return 0
    }
    
    for i in 1...sortedArray.last!{
        var morethanIcount = 0
        for j in 0..<sortedArray.count{
            if sortedArray[j] >= i {
                morethanIcount += 1
            }
        }
        if i > morethanIcount{
            return i-1
        }
    }
    
    return 0
}
