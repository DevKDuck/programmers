풀이방법 

bigAArray - A배열 .sorted(by:) 메소드를 이용한 오름차순정렬

bigBArray - B배열 .sorted(by:) 메소드를 이용한 오름차순정렬

smallAArray - A배열 .sorted(by:) 메소드를 이용한 내림차순정렬

smallBArray - B배열 .sorted(by:) 메소드를 이용한 내림차순정렬

result 반환 값 

 

A배열의 최대값과 B배열의 최대값을 비교함

A의 배열의 최댓값이 더 높으면 A의 가장 큰수 bigAArray[0] 과 B의 가장 작은수 smallBArray[0]을 곱함

B의 배열의 최댓값이 더 높으면 B의 가장 큰수 bigBArray[0] 과 A의 가장 작은수 smallAArray[0]을 곱함

 

import Foundation

func solution(_ A:[Int], _ B:[Int]) -> Int
{
    
    let bigAArray = A.sorted(by: >)
    let bigBArray = B.sorted(by: >)
    let smallAArray = A.sorted(by: <)
    let smallBArray = B.sorted(by: <)
    var result = 0
    
    if A.max()! >= B.max()! {
        for i in 0..<bigAArray.count{
            result += bigAArray[i] * smallBArray[i]
        }
    }else{
        for j in 0..<bigAArray.count{
            result += smallAArray[j] * bigBArray[j]
        }
    }


    return result
}
 

다른 코드들을 보면서 알게된점 

A의 최댓값의 크기와 B의 최솟값을 차례로 곱하는게 포인트 

최댓값을 비교하더라도 그 다음 수가 중요해 max를 비교를 굳이 하지 않아도 됨
