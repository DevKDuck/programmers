3진법 뒤집기
문제 설명
자연수 n이 매개변수로 주어집니다. n을 3진법 상에서 앞뒤로 뒤집은 후, 이를 다시 10진법으로 표현한 수를 return 하도록 solution 함수를 완성해주세요.

제한사항
n은 1 이상 100,000,000 이하인 자연수입니다.
입출력 예
n	result
45	7
125	229
입출력 예 설명
입출력 예 #1

답을 도출하는 과정은 다음과 같습니다.
n (10진법)	n (3진법)	앞뒤 반전(3진법)	10진법으로 표현
45	1200	0021	7
따라서 7을 return 해야 합니다.
입출력 예 #2

답을 도출하는 과정은 다음과 같습니다.
n (10진법)	n (3진법)	앞뒤 반전(3진법)	10진법으로 표현
125	11122	22111	229
따라서 229를 return 해야 합니다.


answer 변수 

3진법에서 뒤집어진 수를 10진수로 변환해서 반환할때 사용

 

result Int형 배열 

n을 3으로 반복하여 나누어 나머지를 배열에 넣어 사용할 예정

 

k 변수 

n의 값을 받을 변수

 

풀이방법

1. n의 값을 받은 k가 3으로 나누어 질때동안 반복하기 위해 while 문 사용

2. 반복하는 동안 k를 3으로 나누었을때 나머지를 j 변수에 값으로 초기화

3. k 를 3으로 나눈 몫을 k값으로 주었음. (나머지를 먼저 계산해야 k값이 변하지 않으므로 순서 중요)

4. j 값 result 배열에 추가

5. 반복문이 끝나면 k를 result 배열에 추가

6. reverse()함수를 이용해서 뒤집어준다. 

-> 이유 [0011]일때 3에0승이 1이고 3에 1승이 1이고 3에 2승이 0이고 3에 3승이 0이기때문에 

반복문으로 10진법으로 변환할시 3에 0승부터 접근하기 위하여 reverse를 사용함 

7. 반복문을이용해서 0부터 result의 count 전까지 반복한다. 

result의 인덱스 x 3의 i승 을 answer에 반복하여 더하여 결과를 도출했다. 

 

이떄 pow 함수를 이용해 제곱을 구했다. 


pow(_ x: _y:)

주어진 거든제곱으로 거듭난 십진수를 반환

이 작업의 결과에 Decimal유형이 제공할 수 있는 것보다 더 높은 정밀도가 필요한 경우 결과는 반올림 모드를 사용하여 반올림됩니다.
 

import Foundation

func solution(_ n:Int) -> Int {
    
    var answer = 0
    var result = [Int]()
    var k = n

    while k >= 3 {
        let j = k % 3
        k = k / 3
        result.append(j)
    }
    result.append(k)   
    result.reverse()
   
    for i in 0..<result.count{
        answer += result[i] * Int(pow(3.0, Double(i)))
    }
    return answer
}
