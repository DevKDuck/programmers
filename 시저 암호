문제풀이

 

1. lowercaseAtoZ 라는 상수 배열 선언 및 초기화 

   result라는 빈문자열 변수 선언 및 초기화

 

 

2. for문을 이용하여 문자열s의 각 글자에 접근하여 i로 받음

isUppercase를 이용하여 i를 대문자인지 확인하여 true, false 반환

 

 

 

3. i을 소문자로 변환하여 lowercaseAtoZ배열의 첫 인덱스부터의거리를 index에 담아주고 

인덱스 + n 을하였을떄 25 보다 크다면 인덱스+n-26를 해주고

거짓일 경우 즉 25보다 작거나 같을 경우 index + n을 nIndex에 담아준다.

 

4. 대문자면 lowercaseAtoZ배열의 [nIndex]를 대문자로

    거짓일 경우 즉 소문자면lowercaseAtoZ 배열의 [nIndex]를 result 문자열 에 추가해라 

 

5.  알파벳에 없으면 result 에 " " 공백을 더해라

 

func solution(_ s:String, _ n:Int) -> String {
  let lowercaseAtoZ = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
  var result = ""
  
  for l in s {
    let isUpperCase = l.isUppercase
    
    if let index = lowercaseAtoZ.firstIndex(of: l.lowercased()) {
      let nIndex = index + n > 25 ? index + n - 26 : index + n
      result += isUpperCase ? lowercaseAtoZ[nIndex].uppercased() : lowercaseAtoZ[nIndex]
      
    } else {
      result += " "
    }
  }
  
  return result
}
 

 

 

처음에 풀어본 코드 

func solution(_ s:String, _ n:Int) -> String {
    let uppercaseAtoZ = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]
    var lowercaseAtoZ = [String]()
    

    for l in 0..<uppercaseAtoZ.count{
        lowercaseAtoZ.append(uppercaseAtoZ[l].lowercased())
    }
    print(lowercaseAtoZ)
    
    let arrayS = s.map({String($0)})
    var result = ""
    
    for i in 0..<arrayS.count{
        for j in 0..<uppercaseAtoZ.count{
            if arrayS[i] == " "{
                result += " "
                break
            }
            if arrayS[i] == uppercaseAtoZ[j]{
                if j + n > 25 {
                result += uppercaseAtoZ[j + n - 26]
                break
                }else{
                    result += uppercaseAtoZ[j+n]
                    break
                }
            }else if arrayS[i] == lowercaseAtoZ[j]{
                if j + n > 25{
                    result += lowercaseAtoZ[j + n - 26]
                    break
                }
                result += lowercaseAtoZ[j + n]
                break
            }
        }
    }
    
    return result
}
