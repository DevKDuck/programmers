문제 설명
두 정수 left와 right가 매개변수로 주어집니다. left부터 right까지의 모든 수들 중에서, 약수의 개수가 짝수인 수는 더하고, 약수의 개수가 홀수인 수는 뺀 수를 return 하도록 solution 함수를 완성해주세요.

제한사항
1 ≤ left ≤ right ≤ 1,000
입출력 예
left	right	result
13	17	43
24	27	52
입출력 예 설명
입출력 예 #1

다음 표는 13부터 17까지의 수들의 약수를 모두 나타낸 것입니다.
수	약수	약수의 개수
13	1, 13	2
14	1, 2, 7, 14	4
15	1, 3, 5, 15	4
16	1, 2, 4, 8, 16	5
17	1, 17	2
따라서, 13 + 14 + 15 - 16 + 17 = 43을 return 해야 합니다.
입출력 예 #2

다음 표는 24부터 27까지의 수들의 약수를 모두 나타낸 것입니다.
수	약수	약수의 개수
24	1, 2, 3, 4, 6, 8, 12, 24	8
25	1, 5, 25	3
26	1, 2, 13, 26	4
27	1, 3, 9, 27	4
따라서, 24 - 25 + 26 + 27 = 52를 return 해야 합니다.



나만의 풀이 방법

- result 결과값 변수 생성

1. 메소드 i 범위 left부터 right까지 for loop생성

2. even이라는 Int 배열 생성

 i가 for loop으로 인해 증가될때마다 빈배열을 만들어주기 위해 바로 위치

3. 메소드 j범위 1부터 right까지 for loop 생성

1부터 right까지 범위의 수를 i에 나눴을때 나머지가 0이면  약수임

이때 left의 값보다 크면 나머지가 left가 됨을 이용

4. 약수면 even 배열에 삽입해라

5. even이 i가 1부터라 상관없긴 하지만 0일때를 생각해 조건문을 사용함 

if even.count != 0
 

6. 조건문을 이용하여 even배열의 요소의 갯수가 2로 나누어 나머지가 0일때 result 변수에 값을 더하고 아니면 빼라



내코드
import Foundation

func solution(_ left:Int, _ right:Int) -> Int {
    var result = 0
    
    
    for i in left...right{
        var even: [Int] = []
        for j in 1...right{
            if i % j == 0{
                even.append(j)
            }
        }
        if even.count != 0 {
            if even.count % 2 == 0 {
                result += i
            }else {
                result -= i
            }
        }
        
        
    }
    
    return result
}


한줄평
배열을 어디에 위치하는지가 키뽀인트 같다.
