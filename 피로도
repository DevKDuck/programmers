import Foundation

func solution(_ k:Int, _ dungeons:[[Int]]) -> Int {
    
    var result = 0 //최대 던전수
    
    
    //모든 경우의 수를 생각해봐야 하기 때문에 재귀 함수 사용
    func visit(_ orders: [Int]){
        //3. orders에 가야할 던전의 순서가 정해질 경우
        if orders.count == dungeons.count{
            
            var remainingFatigue = k //남은 피로도
            var count = 0 // 진행한 던전개수
            
            /*
            4.남은 피로도가 던전의 최소피로도 이상일 경우
            진행 던전개수를 늘리고 남은피로도를 줄이도록함
            */
            for i in 0..<orders.count{
                if remainingFatigue >= dungeons[orders[i]][0]{
                    count += 1
                    remainingFatigue -= dungeons[orders[i]][1]
                }
            }
            
            //5.진행 가능한 던전이 최대일 경우 result 갱신
            if count > result{
                result = count
            }
        }
        // 2.orders에 모든 경우의 수를 인덱스값으로 저장
        for i in 0..<dungeons.count{
            if !orders.contains(i){
                visit(orders + [i])
            }
        }
    }
    
    // 1.처음 입장할 던전을 가지고 재귀함수 실행
    for i in 0..<dungeons.count{
        visit([i])
    }
    
    return result
}
